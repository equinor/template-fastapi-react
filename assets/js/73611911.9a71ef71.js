"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9046],{3600:(t,e,i)=>{i.r(e),i.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"contribute/development-guide/coding/extending-the-api/adding-entities","title":"Adding entities","description":"Entities form the domain model of the application.","source":"@site/docs/contribute/development-guide/coding/extending-the-api/02-adding-entities.md","sourceDirName":"contribute/development-guide/coding/extending-the-api","slug":"/contribute/development-guide/coding/extending-the-api/adding-entities","permalink":"/template-fastapi-react/docs/contribute/development-guide/coding/extending-the-api/adding-entities","draft":false,"unlisted":false,"editUrl":"https://github.com/equinor/template-fastapi-react/tree/main/documentation/docs/contribute/development-guide/coding/extending-the-api/02-adding-entities.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"contribute","previous":{"title":"Extending the API","permalink":"/template-fastapi-react/docs/contribute/development-guide/coding/extending-the-api/"},"next":{"title":"Adding data providers","permalink":"/template-fastapi-react/docs/contribute/development-guide/coding/extending-the-api/adding-data-providers/"}}');var d=i(4848),o=i(8453),s=i(1028);const a='from dataclasses import asdict, dataclass, fields\n\n\n@dataclass(frozen=True)\nclass TodoItem:\n    id: str\n    user_id: str\n    title: str\n    is_completed: bool = False\n\n    def to_dict(self) -> dict[str, str | bool]:\n        return asdict(self)\n\n    @classmethod\n    def from_dict(cls, dict_: dict[str, str | bool]) -> "TodoItem":\n        class_fields = {f.name for f in fields(cls)}\n        if "_id" in dict_:\n            dict_["id"] = dict_.pop("_id")\n        data = {k: v for k, v in dict_.items() if k in class_fields}\n        return TodoItem(**data)  # type:ignore\n',r='import uuid\n\nfrom features.todo.entities.todo_item import TodoItem\n\n\ndef test_todo_item_init():\n    id = str(uuid.uuid4())\n    todo = TodoItem(id=id, title="title 1", is_completed=False, user_id="xyz")\n    assert todo.id == id\n    assert todo.title == "title 1"\n    assert not todo.is_completed\n\n\ndef test_todo_item_from_dict():\n    id = str(uuid.uuid4())\n    init_dict = {"id": id, "title": "title 1", "is_completed": False, "user_id": "xyz"}\n    todo = TodoItem.from_dict(init_dict)\n\n    assert todo.id == id\n    assert todo.title == "title 1"\n    assert not todo.is_completed\n\n\ndef test_todo_item_comparison():\n    id = str(uuid.uuid4())\n    init_dict = {"id": id, "title": "title 1", "is_completed": False, "user_id": "xyz"}\n    todo1 = TodoItem.from_dict(init_dict)\n    todo2 = TodoItem.from_dict(init_dict)\n\n    assert todo1 == todo2\n',c={},l="Adding entities",p={},u=[{value:"Testing entities",id:"testing-entities",level:2}];function m(t){const e={admonition:"admonition",h1:"h1",h2:"h2",header:"header",p:"p",...(0,o.R)(),...t.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(e.header,{children:(0,d.jsx)(e.h1,{id:"adding-entities",children:"Adding entities"})}),"\n",(0,d.jsx)(e.p,{children:"Entities form the domain model of the application."}),"\n",(0,d.jsx)(e.p,{children:"An entity can be an object with methods, or it can be a set of data structures and functions. It should be a regular\nclass, a dataclass, or a value object (if all the properties are the same, two objects are identical). Entities hold\ndata (state) and logic reusable for various applications."}),"\n","\n",(0,d.jsx)(s.A,{language:"jsx",children:a}),"\n",(0,d.jsxs)(e.admonition,{type:"info",children:[(0,d.jsx)(e.p,{children:"Entities must not depend on anything, except possibly other entities."}),(0,d.jsx)(e.p,{children:"Entities should be the most stable code within your application."}),(0,d.jsx)(e.p,{children:"Entities should not be affected by any change external to them."})]}),"\n",(0,d.jsx)(e.h2,{id:"testing-entities",children:"Testing entities"}),"\n","\n",(0,d.jsx)(s.A,{language:"jsx",children:r})]})}function h(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,d.jsx)(e,{...t,children:(0,d.jsx)(m,{...t})}):m(t)}}}]);