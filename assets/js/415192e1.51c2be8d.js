"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5691],{2957:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>_,contentTitle:()=>r,default:()=>f,frontMatter:()=>d,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"contribute/development-guide/coding/extending-the-api/adding-data-providers/clients","title":"Clients","description":"The template already ships with a mongo database client for connecting to MongoDB databases. However, if you need a client that can talk to e.g. PostgreSQL you need to add this.","source":"@site/docs/contribute/development-guide/coding/extending-the-api/adding-data-providers/01-clients.md","sourceDirName":"contribute/development-guide/coding/extending-the-api/adding-data-providers","slug":"/contribute/development-guide/coding/extending-the-api/adding-data-providers/clients","permalink":"/template-fastapi-react/docs/contribute/development-guide/coding/extending-the-api/adding-data-providers/clients","draft":false,"unlisted":false,"editUrl":"https://github.com/equinor/template-fastapi-react/tree/main/documentation/docs/contribute/development-guide/coding/extending-the-api/adding-data-providers/01-clients.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"contribute","previous":{"title":"Adding data providers","permalink":"/template-fastapi-react/docs/contribute/development-guide/coding/extending-the-api/adding-data-providers/"},"next":{"title":"Repository interfaces","permalink":"/template-fastapi-react/docs/contribute/development-guide/coding/extending-the-api/adding-data-providers/repository-interfaces"}}');var s=n(4848),o=n(8453),a=n(1028);const l='from typing import Any\n\nfrom pymongo.cursor import Cursor\nfrom pymongo.database import Database\nfrom pymongo.errors import DuplicateKeyError\nfrom pymongo.mongo_client import MongoClient\nfrom pymongo.results import DeleteResult, InsertManyResult\n\nfrom common.exceptions import NotFoundException, ValidationException\nfrom config import config\nfrom data_providers.clients.client_interface import ClientInterface\n\nMONGO_CLIENT: MongoClient[dict[str, Any]] = MongoClient(\n    host=config.MONGODB_HOSTNAME,\n    port=config.MONGODB_PORT,\n    username=config.MONGODB_USERNAME,\n    password=config.MONGODB_PASSWORD,\n    authSource="admin",\n    tls=False,\n    connectTimeoutMS=5000,\n    serverSelectionTimeoutMS=5000,\n    retryWrites=False,\n)\n\n\nclass MongoDatabaseClient(ClientInterface[dict, str]):\n    def __init__(self, collection_name: str, database_name: str, client: MongoClient[dict[str, Any]] = MONGO_CLIENT):\n        database: Database[dict[str, Any]] = client[database_name]\n        self.database = database\n        self.collection_name = collection_name\n        self.collection = database[collection_name]\n\n    def wipe_db(self) -> None:\n        databases = self.database.client.list_database_names()\n        databases_to_delete = [\n            database_name for database_name in databases if database_name not in ("admin", "config", "local")\n        ]  # Don\'t delete the mongo admin or local database\n        for database_name in databases_to_delete:\n            self.database.client.drop_database(database_name)\n\n    def delete_collection(self) -> None:\n        self.collection.drop()\n\n    def create(self, document: dict[str, Any]) -> dict[str, Any]:\n        try:\n            result = self.collection.insert_one(document)\n            return self.get(str(result.inserted_id))\n        except DuplicateKeyError:\n            raise ValidationException(message=f"The document with id \'{document[\'_id\']}\' already exists")\n\n    def list_collection(self) -> list[dict[str, Any]]:\n        return list(self.collection.find())\n\n    def get(self, uid: str) -> dict[str, Any]:\n        document = self.collection.find_one(filter={"_id": uid})\n        if document is None:\n            raise NotFoundException\n        else:\n            return dict(document)\n\n    def update(self, uid: str, document: dict[str, Any]) -> dict[str, Any]:\n        if self.collection.find_one(filter={"_id": uid}) is None:\n            raise NotFoundException(extra={"uid": uid})\n        self.collection.replace_one({"_id": uid}, document)\n        return self.get(uid)\n\n    def delete(self, uid: str) -> bool:\n        result = self.collection.delete_one(filter={"_id": uid})\n        return result.deleted_count > 0\n\n    def find(self, filter: dict[str, Any]) -> Cursor[dict[str, Any]]:\n        return self.collection.find(filter=filter)\n\n    def find_one(self, filter: dict[str, Any]) -> dict[str, Any] | None:\n        return self.collection.find_one(filter=filter)\n\n    def insert_many(self, items: list[dict[str, Any]]) -> InsertManyResult:\n        return self.collection.insert_many(items)\n\n    def delete_many(self, filter: dict[str, Any]) -> DeleteResult:\n        return self.collection.delete_many(filter)\n',c='import pytest\n\nfrom common.exceptions import NotFoundException, ValidationException\nfrom data_providers.clients.mongodb.mongo_database_client import MongoDatabaseClient\n\n\nclass TestMongoDatabaseClient:\n    def test_find_one(self, test_client: MongoDatabaseClient):\n        document = {"_id": "81549300", "name": "hello"}\n\n        test_client.collection.insert_one(document)\n        assert test_client.find_one({"_id": document["_id"]}) == document\n        assert test_client.find_one({"name": document["name"]}) == document\n        assert test_client.find_one({"_id": document["_id"], "name": document["name"]}) == document\n        assert test_client.find_one({"_id": "unknown"}) is None\n\n    def test_create(self, test_client: MongoDatabaseClient):\n        document = {"_id": "987321", "name": "alberto"}\n        assert test_client.collection.count_documents({}) == 0\n        result = test_client.create(document)\n        assert test_client.collection.count_documents({}) == 1\n        assert result == document\n        # try to create entry with already existing id:\n        with pytest.raises(ValidationException):\n            test_client.create(document)\n\n    def test_get(self, test_client: MongoDatabaseClient):\n        document = {"_id": "81549300", "name": "hello"}\n        test_client.collection.insert_one(document)\n        assert test_client.get(document["_id"]) == document\n        with pytest.raises(NotFoundException):\n            test_client.get("unknown")\n\n    def test_find(self, test_client: MongoDatabaseClient):\n        documents = [\n            {"_id": "81549300", "name": "hello"},\n            {"_id": "1a2b", "name": "pingvin"},\n            {"_id": "987321", "name": "alberto"},\n            {"_id": "987456", "name": "alberto"},\n        ]\n        test_client.collection.insert_many(documents)\n        assert list(test_client.find({})) == documents\n        assert list(test_client.find({"name": "alberto"})) == [\n            documents[2],\n            documents[3],\n        ]\n\n    def test_list(self, test_client: MongoDatabaseClient):\n        documents = [\n            {"_id": "81549300", "name": "hello"},\n            {"_id": "1a2b", "name": "pingvin"},\n            {"_id": "987321", "name": "alberto"},\n            {"_id": "987456", "name": "alberto"},\n        ]\n        test_client.collection.insert_many(documents)\n        assert test_client.list_collection() == documents\n\n    def test_update(self, test_client: MongoDatabaseClient):\n        document = {"_id": "987321", "name": "alberto"}\n        test_client.collection.insert_one(document)\n        instance = document\n        instance_id = instance["_id"]\n        instance["name"] = "Francois"\n        assert test_client.find_one({"_id": instance_id}) != instance["name"]\n        result = test_client.update(instance_id, instance)\n        assert result["name"] == instance["name"]\n        assert test_client.find_one({"_id": instance_id}) == instance\n        # update with non-existing id\n        entries = list(test_client.find({}))\n        with pytest.raises(NotFoundException):\n            assert test_client.update("instance_id", instance)\n        assert list(test_client.find({})) == entries\n\n    def test_delete(self, test_client: MongoDatabaseClient):\n        document = {"_id": "987321", "name": "alberto"}\n        test_client.collection.insert_one(document)\n        test_client.delete(document["_id"])\n        assert test_client.collection.count_documents({}) == 0\n        assert test_client.find_one({"_id": document["_id"]}) is None\n        # try to delete the same entry again\n        test_client.delete(document["_id"])\n        assert test_client.collection.count_documents({}) == 0\n\n    def test_delete_collection(self, test_client: MongoDatabaseClient):\n        documents = [\n            {"_id": "81549300", "name": "hello"},\n            {"_id": "1a2b", "name": "pingvin"},\n            {"_id": "987321", "name": "alberto"},\n            {"_id": "987456", "name": "alberto"},\n        ]\n        test_client.collection.insert_many(documents)\n        # add second collection to TestDB:\n        test_client.database.create_collection("peppers")\n        active_collections = test_client.database.list_collection_names()\n        number_of_entries_in_original_collection = test_client.collection.count_documents({})\n        assert number_of_entries_in_original_collection > 0\n        assert len(active_collections) == 2\n        test_client.delete_collection()\n        assert test_client.database.list_collection_names() == ["peppers"]\n        assert test_client.collection.count_documents({}) == 0\n\n    def test_create_in_empty_database(self, test_client: MongoDatabaseClient):\n        document = {"_id": "1a2b", "name": "pingvin"}\n        assert test_client.collection.count_documents({}) == 0\n        result = test_client.create(document)\n        assert test_client.collection.count_documents({}) == 1\n        assert result == document\n\n    def test_wipe_db(self, test_client: MongoDatabaseClient):\n        documents = [\n            {"_id": "81549300", "name": "hello"},\n            {"_id": "1a2b", "name": "pingvin"},\n            {"_id": "987321", "name": "alberto"},\n            {"_id": "987456", "name": "alberto"},\n        ]\n        test_client.collection.insert_many(documents)\n        original_database = test_client.database.client.list_database_names()[0]\n        collections_in_original_db = test_client.database.client[original_database].list_collection_names()\n        # add admin database (admin collection should not be wiped)\n        test_client.database.client["admin"].create_collection("vips")\n        active_dbs = test_client.database.client.list_database_names()\n        collections_in_admin_db = test_client.database.client["admin"].list_collection_names()\n        assert len(active_dbs) == 2\n        assert len(collections_in_original_db) == 1\n        assert len(collections_in_admin_db) == 1\n        test_client.wipe_db()\n        assert test_client.database.client.list_database_names() == ["admin"]\n        assert test_client.database[collections_in_original_db[0]].count_documents({}) == 0\n',d={},r="Clients",_={},m=[{value:"Testing clients",id:"testing-clients",level:2}];function u(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"clients",children:"Clients"})}),"\n",(0,s.jsx)(t.p,{children:"The template already ships with a mongo database client for connecting to MongoDB databases. However, if you need a client that can talk to e.g. PostgreSQL you need to add this."}),"\n","\n","\n",(0,s.jsx)(a.A,{language:"jsx",children:l}),"\n",(0,s.jsx)(t.h2,{id:"testing-clients",children:"Testing clients"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"test_client"})," fixture are using the mongomock instead of real database."]}),"\n","\n",(0,s.jsx)(a.A,{language:"jsx",children:c})]})}function f(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);