"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7248],{1355:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>m});const n=JSON.parse('{"id":"contribute/development-guide/coding/extending-the-api/adding-data-providers/repository-interfaces","title":"Repository interfaces","description":"A repository interface describes the incoming parameters and the type of the object returned by a repository. The","source":"@site/docs/contribute/development-guide/coding/extending-the-api/adding-data-providers/02-repository-interfaces.md","sourceDirName":"contribute/development-guide/coding/extending-the-api/adding-data-providers","slug":"/contribute/development-guide/coding/extending-the-api/adding-data-providers/repository-interfaces","permalink":"/template-fastapi-react/docs/contribute/development-guide/coding/extending-the-api/adding-data-providers/repository-interfaces","draft":false,"unlisted":false,"editUrl":"https://github.com/equinor/template-fastapi-react/tree/main/documentation/docs/contribute/development-guide/coding/extending-the-api/adding-data-providers/02-repository-interfaces.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"contribute","previous":{"title":"Clients","permalink":"/template-fastapi-react/docs/contribute/development-guide/coding/extending-the-api/adding-data-providers/clients"},"next":{"title":"Repositories","permalink":"/template-fastapi-react/docs/contribute/development-guide/coding/extending-the-api/adding-data-providers/repositories"}}');var r=o(4848),i=o(8453),a=o(1028);const d="from abc import ABCMeta, abstractmethod\n\nfrom features.todo.entities.todo_item import TodoItem\n\n\nclass TodoRepositoryInterface(metaclass=ABCMeta):\n    @abstractmethod\n    def create(self, todo_item: TodoItem) -> TodoItem | None:\n        raise NotImplementedError\n\n    @abstractmethod\n    def get(self, todo_item_id: str) -> TodoItem:\n        raise NotImplementedError\n\n    @abstractmethod\n    def update(self, todo_item: TodoItem) -> TodoItem:\n        raise NotImplementedError\n\n    @abstractmethod\n    def delete(self, todo_item_id: str) -> None:\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_all(self) -> list[TodoItem]:\n        raise NotImplementedError\n",s={},c="Repository interfaces",p={},m=[];function l(e){const t={h1:"h1",header:"header",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"repository-interfaces",children:"Repository interfaces"})}),"\n",(0,r.jsx)(t.p,{children:"A repository interface describes the incoming parameters and the type of the object returned by a repository. The\npurpose of these interfaces is to allow use-cases to be implementation-agnostic (and thus not depend on an outer layer).\nIt also allows for mocking of repositories for testing purposes."}),"\n","\n","\n",(0,r.jsx)(a.A,{language:"jsx",children:d})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);