"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6178],{6626:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>_,default:()=>f,frontMatter:()=>l,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"contribute/development-guide/coding/extending-the-api/adding-data-providers/repositories","title":"Repositories","description":"Concrete implementations of repository interfaces. A repository takes entities and returns entities, while hiding","source":"@site/docs/contribute/development-guide/coding/extending-the-api/adding-data-providers/03-repositories.md","sourceDirName":"contribute/development-guide/coding/extending-the-api/adding-data-providers","slug":"/contribute/development-guide/coding/extending-the-api/adding-data-providers/repositories","permalink":"/template-fastapi-react/docs/contribute/development-guide/coding/extending-the-api/adding-data-providers/repositories","draft":false,"unlisted":false,"editUrl":"https://github.com/equinor/template-fastapi-react/tree/main/documentation/docs/contribute/development-guide/coding/extending-the-api/adding-data-providers/03-repositories.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"contribute","previous":{"title":"Repository interfaces","permalink":"/template-fastapi-react/docs/contribute/development-guide/coding/extending-the-api/adding-data-providers/repository-interfaces"},"next":{"title":"Adding features","permalink":"/template-fastapi-react/docs/contribute/development-guide/coding/extending-the-api/adding-features/"}}');var n=o(4848),d=o(8453),s=o(1028);const r='from typing import Any\n\nfrom common.exceptions import NotFoundException\nfrom config import config\nfrom data_providers.clients.client_interface import ClientInterface\nfrom data_providers.clients.mongodb.mongo_database_client import MongoDatabaseClient\nfrom features.todo.entities.todo_item import TodoItem\nfrom features.todo.repository.todo_repository_interface import TodoRepositoryInterface\n\n\ndef to_dict(todo_item: TodoItem) -> dict[str, Any]:\n    _dict: dict[str, Any] = todo_item.__dict__\n    _dict["_id"] = todo_item.id\n    return _dict\n\n\ndef get_todo_repository() -> "TodoRepository":\n    mongo_database_client = MongoDatabaseClient(collection_name="todos", database_name=config.MONGODB_DATABASE)\n    return TodoRepository(client=mongo_database_client)\n\n\nclass TodoRepository(TodoRepositoryInterface):\n    client: ClientInterface\n\n    def __init__(self, client: ClientInterface):\n        self.client = client\n\n    def update(self, todo_item: TodoItem) -> TodoItem:\n        updated_todo_item = self.client.update(todo_item.id, to_dict(todo_item))\n        return TodoItem.from_dict(updated_todo_item)\n\n    def delete(self, todo_item_id: str) -> None:\n        is_deleted = self.client.delete(todo_item_id)\n        if not is_deleted:\n            raise NotFoundException\n\n    def delete_all(self) -> None:\n        self.client.delete_collection()\n\n    def get(self, todo_item_id: str) -> TodoItem:\n        todo_item = self.client.get(todo_item_id)\n        return TodoItem.from_dict(todo_item)\n\n    def create(self, todo_item: TodoItem) -> TodoItem | None:\n        inserted_todo_item = self.client.create(to_dict(todo_item))\n        return TodoItem.from_dict(inserted_todo_item)\n\n    def get_all(self) -> list[TodoItem]:\n        todo_items: list[TodoItem] = []\n        for item in self.client.list_collection():\n            todo_items.append(TodoItem.from_dict(item))\n        return todo_items\n\n    def find_one(self, filter: dict[str, Any]) -> TodoItem | None:\n        todo_item = self.client.find_one(filter)\n        if todo_item:\n            return TodoItem.from_dict(todo_item)\n        return None\n',a='import pytest\n\nfrom common.exceptions import NotFoundException, ValidationException\nfrom data_providers.clients.mongodb.mongo_database_client import MongoDatabaseClient\nfrom features.todo.entities.todo_item import TodoItem\nfrom features.todo.repository.todo_repository import TodoRepository\n\n\nclass TestTodoRepository:\n    @pytest.fixture(autouse=True)\n    def _setup_repository(self, test_client: MongoDatabaseClient):\n        self.repository = TodoRepository(client=test_client)\n\n    def test_create(self):\n        todo_item = TodoItem(id="1234", title="todo 1", user_id="xyz")\n        self.repository.create(todo_item)\n        assert len(self.repository.get_all()) == 1\n\n    def test_create_already_exists(self):\n        todo_item_1 = TodoItem(id="1234", title="todo 1", user_id="xyz")\n        self.repository.create(todo_item_1)\n        with pytest.raises(ValidationException):\n            todo_item_2 = TodoItem(id="1234", title="todo 1", user_id="xyz")\n            self.repository.create(todo_item_2)\n\n    def test_find_item_that_exist(self):\n        documents = [\n            {"_id": "81549300", "title": "todo 1", "user_id": "xyz"},\n            {"_id": "1a2b", "title": "todo 2", "user_id": "xyz"},\n            {"_id": "987321", "title": "todo 3", "user_id": "abc"},\n            {"_id": "987456", "title": "todo 4", "user_id": "abc"},\n        ]\n        self.repository.client.insert_many(documents)\n        todo_item = self.repository.find_one({"title": "todo 2", "user_id": "xyz"})\n        assert todo_item is not None and todo_item.id == "1a2b"\n\n    def test_find_item_that_does_not_exist(self):\n        documents = [\n            {"_id": "81549300", "title": "todo 1", "user_id": "xyz"},\n            {"_id": "1a2b", "title": "todo 2", "user_id": "xyz"},\n            {"_id": "987321", "title": "todo 3", "user_id": "abc"},\n            {"_id": "987456", "title": "todo 4", "user_id": "abc"},\n        ]\n        self.repository.client.insert_many(documents)\n        assert self.repository.find_one({"_id": "invalid"}) is None\n\n    def test_find_item_of_other_user(self):\n        documents = [\n            {"_id": "81549300", "title": "todo 1", "user_id": "xyz"},\n            {"_id": "1a2b", "title": "todo 2", "user_id": "xyz"},\n            {"_id": "987321", "title": "todo 3", "user_id": "abc"},\n            {"_id": "987456", "title": "todo 4", "user_id": "abc"},\n        ]\n        self.repository.client.insert_many(documents)\n        assert self.repository.find_one({"_id": "1a2b", "user_id": "abc"}) is None\n\n    def test_get_item_that_does_exist(self):\n        documents = [\n            {"_id": "81549300", "title": "todo 1", "user_id": "xyz"},\n            {"_id": "1a2b", "title": "todo 2", "user_id": "xyz"},\n            {"_id": "987321", "title": "todo 3", "user_id": "abc"},\n            {"_id": "987456", "title": "todo 4", "user_id": "abc"},\n        ]\n        self.repository.client.insert_many(documents)\n        assert self.repository.get("987321").id == "987321"\n\n    def test_get_item_that_does_not_exist(self):\n        documents = [\n            {"_id": "81549300", "title": "todo 1", "user_id": "xyz"},\n            {"_id": "1a2b", "title": "todo 2", "user_id": "xyz"},\n            {"_id": "987321", "title": "todo 3", "user_id": "abc"},\n            {"_id": "987456", "title": "todo 4", "user_id": "abc"},\n        ]\n        self.repository.client.insert_many(documents)\n        with pytest.raises(NotFoundException):\n            self.repository.get("invalid")\n\n    def test_update_item(self):\n        todo_item = TodoItem(id="81549300", title="todo 1", user_id="xyz")\n        self.repository.create(todo_item)\n        todo_item_to_update = TodoItem(id="81549300", title="Updated title", user_id="xyz")\n        self.repository.update(todo_item=todo_item_to_update)\n        assert self.repository.get("81549300").title == "Updated title"\n\n    def test_update_item_that_does_not_exist(self):\n        todo_item_to_update = TodoItem(id="unknown", title="Updated title", user_id="xyz")\n        with pytest.raises(NotFoundException):\n            self.repository.update(todo_item_to_update)\n\n    def test_delete(self):\n        documents = [\n            {"_id": "81549300", "title": "todo 1", "user_id": "xyz"},\n            {"_id": "1a2b", "title": "todo 2", "user_id": "xyz"},\n        ]\n        self.repository.client.insert_many(documents)\n        assert len(self.repository.get_all()) == 2\n        self.repository.delete("81549300")\n        assert len(self.repository.get_all()) == 1\n        assert self.repository.get_all() == [self.repository.get("1a2b")]\n\n    def test_delete_all(self):\n        documents = [\n            {"_id": "81549300", "title": "todo 1", "user_id": "xyz"},\n            {"_id": "1a2b", "title": "todo 2", "user_id": "xyz"},\n        ]\n        self.repository.client.insert_many(documents)\n        assert len(self.repository.get_all()) == 2\n        self.repository.delete_all()\n        assert len(self.repository.get_all()) == 0\n',l={},_="Repositories",c={},m=[{value:"Testing repositories",id:"testing-repositories",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,d.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"repositories",children:"Repositories"})}),"\n",(0,n.jsx)(t.p,{children:"Concrete implementations of repository interfaces. A repository takes entities and returns entities, while hiding\nstorage details. It can work against local, remote, data services or third party services."}),"\n","\n","\n",(0,n.jsx)(s.A,{language:"jsx",children:r}),"\n",(0,n.jsx)(t.h2,{id:"testing-repositories",children:"Testing repositories"}),"\n",(0,n.jsxs)(t.p,{children:["Use the ",(0,n.jsx)(t.code,{children:"test_client"})," fixture as input to TodoRepository. The ",(0,n.jsx)(t.code,{children:"test_client"})," fixture are using the mongomock instead of\nreal database."]}),"\n","\n",(0,n.jsx)(s.A,{language:"jsx",children:a})]})}function f(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}}}]);