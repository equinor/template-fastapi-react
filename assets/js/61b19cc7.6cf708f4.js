"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5797],{2923:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"contribute/ground-rules","title":"Ground rules","description":"* For major changes, please open an issue first to discuss what you would like to change.","source":"@site/docs/contribute/02-ground-rules.md","sourceDirName":"contribute","slug":"/contribute/ground-rules","permalink":"/template-fastapi-react/docs/contribute/ground-rules","draft":false,"unlisted":false,"editUrl":"https://github.com/equinor/template-fastapi-react/tree/main/documentation/docs/contribute/02-ground-rules.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"contribute","previous":{"title":"How to start contributing","permalink":"/template-fastapi-react/docs/contribute/how-to-start-contributing"},"next":{"title":"Development guide","permalink":"/template-fastapi-react/docs/category/development-guide"}}');var o=t(4848),r=t(8453);const i={},a="Ground rules",l={},c=[{value:"Pull Requests",id:"pull-requests",level:2},{value:"Git commit format",id:"git-commit-format",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"ground-rules",children:"Ground rules"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["For major changes, please open an issue first to discuss what you would like to change.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Search for existing issues and pull requests on the ",(0,o.jsx)(n.a,{href:"https://github.com/equinor/template-fastapi-react/projects/1",children:"project development board"})," before creating your own."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Contributors should fork the repository and work on fixes or enhancements on their own fork.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Use the ",(0,o.jsx)(n.a,{href:"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork",children:"pull request feature"})," to submit your changes to this  repository."]}),"\n",(0,o.jsx)(n.li,{children:"All pull requests should be rebased (with main) and commits squashed prior to the final merge process."}),"\n",(0,o.jsxs)(n.li,{children:["Use ",(0,o.jsx)(n.a,{href:"https://www.conventionalcommits.org/en/v1.0.0/",children:"conventional commit"})," formatting for commit messages, so that it's possible to auto-generate the changelogs."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Use a separate branch for each issue you\u2019re working on.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Do not combine fixes for multiple issues into one branch."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Please include unit tests with all your code changes.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"All unit tests must be 100% passing before the pull requests will be approved and merged."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"pull-requests",children:"Pull Requests"}),"\n",(0,o.jsx)(n.p,{children:"Please try to make your pull request easy to review for us."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Make small pull requests. The smaller, the faster to review and the more likely it will be merged soon."}),"\n",(0,o.jsxs)(n.li,{children:["Don't make changes unrelated to the goals of your PR.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"There might be typos on some comments, or perhaps a function is in need of refactoring - regardless, if those changes are not related to your PR, please implement those changes in another PR."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"While you're writing up the pull request, you can add Closes #XXX in the message body where #XXX is the issue you're fixing. Therefore, an example would be Closes #42 would close issue #42."}),"\n",(0,o.jsx)(n.h2,{id:"git-commit-format",children:"Git commit format"}),"\n",(0,o.jsx)(n.p,{children:"We have very precise rules over how our git commit messages can be formatted."}),"\n",(0,o.jsxs)(n.p,{children:["We are using the ",(0,o.jsx)(n.a,{href:"https://www.conventionalcommits.org/en/v1.0.0/",children:"conventional commits"})," formatting for commit messages."]}),"\n",(0,o.jsx)(n.p,{children:"Here\u2019s an example commit message:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"type: short description of what you did (imperative tense) <= 50 chars\n\nWhen necessary, mote details can come here, until 72 chars each line.\n\nBREAKING CHANGE: some description\n\nFixes #1234\n"})}),"\n",(0,o.jsx)(n.p,{children:"The type can be one of these types: feat, fix, build, ci, docs, style, refactor, test, and chore."}),"\n",(0,o.jsxs)(n.admonition,{type:"caution",children:[(0,o.jsx)(n.p,{children:"Summary should:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Be written in imperative, present tense, e.g. write ",(0,o.jsx)(n.code,{children:"add"})," instead of ",(0,o.jsx)(n.code,{children:"added"})," or ",(0,o.jsx)(n.code,{children:"adds"}),"."]}),"\n",(0,o.jsx)(n.li,{children:"Don't capitalize the first letter."}),"\n",(0,o.jsx)(n.li,{children:"Don't write dot (.) at the end."}),"\n"]})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"An example"}),(0,o.jsx)(n.p,{children:"patches (1.0.0 \u2192 1.0.1)"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'git commit -a -m "fix(parsing): fixed a bug in our parser"\n'})}),(0,o.jsx)(n.p,{children:"features (1.0.0 \u2192 1.1.0)"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'git commit -a -m "feat(parser): we now have a parser \\o/"\n'})}),(0,o.jsx)(n.p,{children:"breaking changes (1.0.0 \u2192 2.0.0)"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'git commit -a -m "feat(new-parser): introduces a new parsing library\nBREAKING CHANGE: new library does not support foo-construct"\n'})}),(0,o.jsx)(n.p,{children:"Complete:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"refactor!: foo-bar replaces bar-foo\n\nbar-foo does not fit other solutions, use standard convention foo-bar\n\nAB#11\nCloses #22, AB#33, equinor/otherrepo#44\n\nBREAKING CHANGE:\n\n'bar-foo' command has changed from 'bar-foo' to 'foo-bar'\n\nTo migrate your project, change all command where you use 'bar-foo' with 'foo-bar'\n\nCo-authored-by: Elliot Alderson\n"})})]}),"\n",(0,o.jsx)(n.p,{children:"This leads to more readable messages that are easy to follow when looking through the project history."}),"\n",(0,o.jsx)(n.p,{children:"It is important to note that we use the git commit messages to auto-generate changelogs for each release."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);